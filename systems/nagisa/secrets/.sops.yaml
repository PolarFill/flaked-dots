# Methodology explanation:

# User keys represent specific users regardless of the current system
# Systems keys represent specific systems as a whole.

# To succefully decrypt the secrets, one needs the correct user + system combination.
# So, a file made by user "lostsky" on the "akarin" system would need both lostsky's and akarin's keys.
# Meanwhile, if "lostsky" made a file on "sakisaki" system, it would need lostsky's and sakisaki's keys.

# Theres also 2 master keys to decrypt these files in case the other keys are lost.
# All 2 keys need to be used at the same time, and work for every encrypted sops file (of mine, at least :p)

keys:
  - &master_p1 age1dgh4zkca9zh9k99y2s3aeegk274kexfc99ltp95ywu8fzz6xmyxsyzr4k8
  - &master_p2 age1qdt22yt969eq7zxmrd4n7xk4y572p20e9rhpkk7zqnas8axjgdpq6wqgpt

  - &users:
    - &skynet age1ndqk78txld56j0pd26hups79zztpffg0h6demgap6gzla7an6pzqplssak
    - &root age182f62l0x42y3dc82njjxfyeyy2fqx2r7pxfeuvwmvllvg2x8634q56h2g7 
  - &systems:
    - &nagisa age1h0jpet0j80q26zasylpycydm7ssg2kxn2k3yyvu4jj6jv82qfanqwnf0jj
      
creation_rules:
  - path_regex: \_secrets.yaml$
    key_groups:
    - age: 
      - *skynet
    - age:  
      - *nagisa

  - path_regex: \_secrets.conf$
    key_groups:
    - age: 
      - *skynet
    - age:  
      - *nagisa

  - path_regex: \_root-secrets.yaml$
    key_groups:
    - age: 
      - *root
    - age:  
      - *nagisa

  - path_regex: keys.txt$
    key_groups:
      - age:
        - *master_p1
      - age:
        - *master_p2
